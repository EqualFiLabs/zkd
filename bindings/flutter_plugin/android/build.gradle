group = "dev.zkprov.zkprov_flutter"
version = "1.0-SNAPSHOT"

buildscript {
    ext.kotlin_version = "2.1.0"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.9.1")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    namespace = "dev.zkprov.zkprov_flutter"

    compileSdk = 36

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }

    sourceSets {
        main {
            java.srcDirs += "src/main/kotlin"
            jniLibs.srcDirs += "src/main/jniLibs"
        }
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 24
    }

    dependencies {
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.0.0")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}

def zkprovJniRoot = file("src/main/jniLibs")

tasks.register("verifyZkprovJniLibs") {
    doLast {
        if (!zkprovJniRoot.exists()) {
            throw new GradleException("Expected native libraries under ${zkprovJniRoot.absolutePath}")
        }

        def abiDirs = zkprovJniRoot.listFiles()?.findAll { it.isDirectory() } ?: []
        if (abiDirs.isEmpty()) {
            throw new GradleException("No ABI directories found under ${zkprovJniRoot.absolutePath}")
        }

        def missing = abiDirs.findAll { !new File(it, "libzkprov.so").exists() }
        if (!missing.isEmpty()) {
            throw new GradleException("Missing libzkprov.so for ABIs: ${missing.collect { it.name }.join(', ')}")
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith("merge") && task.name.endsWith("JniLibFolders")) {
        task.dependsOn(tasks.named("verifyZkprovJniLibs"))
    }
}
