name: CI

on:
  push:
  pull_request:

jobs:
  build-test:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
            shared-artifact: zkprov-ffi-linux
            shared-path: target/x86_64-unknown-linux-gnu/release/libzkprov.so
            static-artifact: zkprov-ffi-static-linux
            static-path: target/x86_64-unknown-linux-gnu/release/libzkprov.a
          - os: macos-14
            rust-target: aarch64-apple-darwin
            shared-artifact: zkprov-ffi-macos-arm64
            shared-path: target/aarch64-apple-darwin/release/libzkprov.dylib
            static-artifact: zkprov-ffi-static-macos-arm64
            static-path: target/aarch64-apple-darwin/release/libzkprov.a
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
            shared-artifact: zkprov-ffi-windows
            shared-path: target/x86_64-pc-windows-msvc/release/zkprov.dll
            static-artifact: zkprov-ffi-static-windows
            static-path: target/x86_64-pc-windows-msvc/release/zkprov.lib
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install Foundry toolchain
        uses: foundry-rs/foundry-toolchain@v1
      - name: Install Rust target
        run: rustup target add ${{ matrix.rust-target }}
      - name: Install clang (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang
      - name: Build workspace
        run: cargo build --workspace
      - name: Header sanity check
        run: clang -Wall -fsyntax-only include/zkprov.h
      - name: Build FFI libraries (release)
        run: cargo build -p zkprov-ffi-c --release --target ${{ matrix.rust-target }}
      - name: Upload FFI shared library artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.shared-artifact }}
          path: ${{ matrix.shared-path }}
      - name: Upload FFI static library artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.static-artifact }}
          path: ${{ matrix.static-path }}
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Node dependencies
        working-directory: bindings/node
        env:
          ZKPROV_STATIC: ${{ github.workspace }}/${{ matrix.static-path }}
        run: npm ci
      - name: Build Node addon
        working-directory: bindings/node
        run: npx node-gyp rebuild
        env:
          ZKPROV_STATIC: ${{ github.workspace }}/${{ matrix.static-path }}
      - name: Node bindings tests
        working-directory: bindings/node
        env:
          ZKPROV_STATIC: ${{ github.workspace }}/${{ matrix.static-path }}
        run: npm test
      - name: Run ffi_roundtrip C test (Linux)
        if: runner.os == 'Linux'
        run: |
          clang -I include tests/ffi_roundtrip.c \
            -L target/x86_64-unknown-linux-gnu/release -lzkprov \
            -Wl,-rpath,$(pwd)/target/x86_64-unknown-linux-gnu/release -o ffi_roundtrip
          LD_LIBRARY_PATH=$(pwd)/target/x86_64-unknown-linux-gnu/release ./ffi_roundtrip
      - name: Test
        run: cargo test --workspace --all-features -- --nocapture
      - name: Clippy
        run: cargo clippy --workspace --all-targets -- -D warnings
      - name: Format
        run: cargo fmt --all -- --check
